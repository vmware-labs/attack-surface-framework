#!/bin/bash

if test "f$1" "=" "f"
then 
    echo "Error, please specify a JobID"
    exit 1
fi
. /opt/asf/tools/scripts/arguments nuclei $1
DATE_STAMP=`date +"%Y%m%d%H%M%S"`
JOB_FOLDERS="/home/asf/jobs"
JOB_FOLDER="$JOB_FOLDERS/$1"
JOB_OUTPUT_FOLDER="$JOB_FOLDER/$DATE_STAMP"
TERM="xterm"
if ! test -e "$JOB_FOLDER"
then 
    echo "Error, JobID $1 is invalid"
    exit 1
fi
if test -e "JOB_FOLDER/.lock"
then 
	echo "Error, process is already running"
	exit 1
fi
echo > "$JOB_FOLDER/.lock"
cd /opt/asf/frontend/asfui
. bin/activate
python3 /opt/asf/frontend/asfui/manage.py remaster_input --input JobID:$1 --parser url --output "$JOB_FOLDER/app.input"
mkdir -p $JOB_OUTPUT_FOLDER
cp /opt/asf/tools/dicts/default.dict "$JOB_FOLDER/app.dict"
cp /opt/asf/tools/dicts/users.dict "$JOB_FOLDER/app.users"
for mode in input asf dict users
do cp -v "$JOB_FOLDER/app.$mode" "$JOB_OUTPUT_FOLDER/app.$mode"
done
#IMAGE_NAME='projectdiscovery/nuclei'
IMAGE_NAME='m4ch1n3s/nuclei'
#if ! docker images | grep $IMAGE_NAME
#then echo "Building nuclei..."
#docker build -t m4ch1n3s/nuclei /opt/asf/redteam/nuclei/nuclei-master/
#fi
mkdir -p /home/nuclei-templates
chmod 777 /home/nuclei-templates
#if ! test -e /home/nuclei-templates/README.md
#then
#	docker run -i --rm -v $JOB_OUTPUT_FOLDER/:/mnt -v /home/nuclei-templates:/app/nuclei-templates $IMAGE_NAME  -update-templates 2>&1 > "$JOB_OUTPUT_FOLDER/app.log"
#fi
#Reads blacklist file
#python3 /opt/asf/frontend/asfui/manage.py nucleialert --mode=blacklist.save --templatesdir /home/nuclei-templates --templatesignorefile /home/nuclei-templates/.nuclei-ignore
python3 /opt/asf/frontend/asfui/manage.py nucleialert --mode=config.save --configtemplate /opt/asf/redteam/nuclei/config.yaml --configoutput /home/asf/nuclei-config.yaml
#echo docker run --rm -v $JOB_OUTPUT_FOLDER/:/mnt -v /home/nuclei-templates:/app/nuclei-templates $IMAGE_NAME -no-color -t /app/nuclei-templates/cves/ -l /mnt/app.input 2>&1 \| tee "$JOB_OUTPUT_FOLDER/app.report.txt" \>\> "$JOB_OUTPUT_FOLDER/app.log" \&
#slice the app.input into 100 uri values
python3 /opt/asf/frontend/asfui/manage.py owners_tools --input $JOB_OUTPUT_FOLDER/app.input --output=$JOB_OUTPUT_FOLDER/app.slice --mode=slice.list --size=100
#iterate all slices
for slice in $JOB_OUTPUT_FOLDER/app.slice.*.ip
do
	#validate all ip addresses by slices
	python3 /opt/asf/tools/vss-rt-master-validate/PublicIPextractByIPs.py all $slice $JOB_OUTPUT_FOLDER
	#Merge 4 cloud types and perform validation
	python3 /opt/asf/frontend/asfui/manage.py owners_tools --input $JOB_OUTPUT_FOLDER/awsFullDetails.ksv,$JOB_OUTPUT_FOLDER/azureFullDetails.ksv,$JOB_OUTPUT_FOLDER/gcp1FullDetails.ksv,$JOB_OUTPUT_FOLDER/gcp2FullDetails.ksv --output=${slice}.valid --mode=merge.ip
	#Validate the list of URIs against the validated IP addresses list
	python3 /opt/asf/frontend/asfui/manage.py owners_tools --input=$slice --mode=validate.list
	#Get the basename of the file to reference against the list.valid URIs
	BASE_SLICE=`basename $(echo $slice | awk -F '.ip' '{print $1}')`
	#Run nuclei and parse on real time
	#docker run --rm -v $JOB_OUTPUT_FOLDER/:/mnt -v /home/nuclei-templates:/app/nuclei-templates $IMAGE_NAME -no-color  -t /app/nuclei-templates/technologies -t /app/nuclei-templates/takeovers -t /app/nuclei-templates/exposed-panels -t /app/nuclei-templates/misconfiguration -t /app/nuclei-templates/exposures -t /app/nuclei-templates/exposed-panels -t /app/nuclei-templates/exposed-tokens -l /mnt/ 2>&1 | tee "$JOB_OUTPUT_FOLDER/app.report.txt" |  python3 /opt/asf/frontend/asfui/manage.py remaster_output --parser=nuclei --debug --input="stdin" --output=JobID:$1 >> "$JOB_OUTPUT_FOLDER/app.log" &
	docker run --rm -v $JOB_OUTPUT_FOLDER/:/mnt -v /home/nuclei-templates:/home/nuclei-templates $IMAGE_NAME -duc -json -no-color $ARG0 -l /mnt/${BASE_SLICE}.list.valid $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $ARG7 $ARG8 $ARG9 2>&1 | tee "$JOB_OUTPUT_FOLDER/${BASE_SLICE}.report.txt" |  python3 /opt/asf/frontend/asfui/manage.py remaster_output --parser=nuclei --debug --input="stdin" --output=JobID:$1 >> "$JOB_OUTPUT_FOLDER/app.log" &
	#nuclei -duc -no-color -l $JOB_OUTPUT_FOLDER/${BASE_SLICE}.list.valid $ARG0 $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $ARG7 $ARG8 $ARG9 2>&1 | tee "$JOB_OUTPUT_FOLDER/${BASE_SLICE}.report.txt" |  python3 /opt/asf/frontend/asfui/manage.py remaster_output --parser=nuclei --debug --input="stdin" --output=JobID:$1 >> "$JOB_OUTPUT_FOLDER/app.log" &
	#Captures the PID and retain it until next slice, exit if lock file is deleted
	JOB_PID=$!
	echo $JOB_PID>"$JOB_FOLDER/pid"
	wait $PID
	cat "$JOB_OUTPUT_FOLDER/${BASE_SLICE}.report.txt" >> "$JOB_OUTPUT_FOLDER/app.report.txt"
	rm -v "$JOB_FOLDER/pid"
	#Clean slice files after scanned to release inodes
	rm -v ${JOB_OUTPUT_FOLDER}/${BASE_SLICE}.*
	if ! test -e "$JOB_FOLDER/.lock"
		then exit
	fi
done
rm -v "$JOB_FOLDER/.lock"